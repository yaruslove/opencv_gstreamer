FROM nvcr.io/nvidia/cuda-dl-base:25.03-cuda12.8-runtime-ubuntu24.04

# Избегаем интерактивных запросов
ENV DEBIAN_FRONTEND=noninteractive

# Устанавливаем базовые инструменты разработки
RUN apt-get update && apt-get install -y \
    vim \
    build-essential \
    cmake \
    git \
    wget \
    unzip \
    yasm \
    pkg-config \
    software-properties-common

# Проверяем, какие версии Python доступны
RUN apt-get update && apt-cache search python3 | grep -E '^python3\.[0-9]+'

# Устанавливаем Python 3.10 из deadsnakes PPA (поскольку Ubuntu 24.04 может использовать Python 3.12 по умолчанию)
RUN apt-get install -y software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y \
    python3.10 \
    python3.10-dev \
    python3.10-venv \
    python3-pip \
    python3-setuptools \
    python3-wheel

# Создаем символические ссылки для Python 3.10
RUN if [ -f /usr/bin/python3.10 ]; then \
        update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1 && \
        update-alternatives --install /usr/bin/python python /usr/bin/python3.10 1; \
    elif [ -f /usr/local/bin/python3.10 ]; then \
        update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.10 1 && \
        update-alternatives --install /usr/bin/python python /usr/local/bin/python3.10 1; \
    else \
        echo "Python 3.10 не найден, используем системный Python" && \
        update-alternatives --install /usr/bin/python python /usr/bin/python3 1; \
    fi

# Устанавливаем gcc-11 и g++-11
RUN apt-get install -y gcc-11 g++-11

# Устанавливаем gcc-11 и g++-11 как компиляторы по умолчанию
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 110 \
    --slave /usr/bin/g++ g++ /usr/bin/g++-11 \
    --slave /usr/bin/gcov gcov /usr/bin/gcov-11

# Проверяем версии компиляторов
RUN gcc --version && g++ --version

# Устанавливаем GStreamer с поддержкой NVIDIA
RUN apt-get install -y \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer-plugins-good1.0-dev \
    libgstreamer-plugins-bad1.0-dev \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-base \
    gstreamer1.0-tools

# Добавляем репозиторий NVIDIA для плагинов GStreamer
# Примечание: в Ubuntu 24.04 эта команда может не работать
RUN apt-get install -y software-properties-common && \
    add-apt-repository ppa:graphics-drivers/ppa || echo "Warning: Не удалось добавить PPA graphics-drivers. Продолжаем..."

# Устанавливаем NVIDIA GStreamer плагины
RUN apt-get update && apt-get install -y \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-libav \
    gstreamer1.0-gl \
    gstreamer1.0-rtsp \
    gstreamer1.0-x

# Копируем и устанавливаем NVIDIA Video Codec Interface
COPY Video_Codec_Interface_13.0.19.zip /tmp/
RUN unzip -q /tmp/Video_Codec_Interface_13.0.19.zip -d /tmp && \
    cp -a /tmp/Video_Codec_Interface_13.0.19/Interface/. /usr/local/include/ && \
    rm -rf /tmp/Video_Codec_Interface_13.0.19.zip /tmp/Video_Codec_Interface_13.0.19

# Устанавливаем дополнительные библиотеки для OpenCV
RUN apt-get install -y \
    libgtk-3-dev \
    libtbb-dev \
    libatlas-base-dev \
    libdc1394-dev \
    libxine2-dev \
    libv4l-dev \
    libtesseract-dev \
    libleptonica-dev \
    libopenblas-dev \
    liblapack-dev \
    libeigen3-dev

# Устанавливаем NumPy для Python
RUN pip3 install numpy

# Создаем директорию для сборки и скачиваем исходный код OpenCV
WORKDIR /opencv_build
ENV OPENCV_VERSION=4.9.0
RUN wget -q -O opencv.zip https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \
    wget -q -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \
    unzip -q opencv.zip && \
    unzip -q opencv_contrib.zip && \
    rm opencv.zip opencv_contrib.zip && \
    mv opencv-${OPENCV_VERSION} opencv && \
    mv opencv_contrib-${OPENCV_VERSION} opencv_contrib && \
    mkdir build

# Настраиваем переменные среды для компиляции
ENV CC=/usr/bin/gcc-11
ENV CXX=/usr/bin/g++-11

# Конфигурируем и собираем OpenCV
WORKDIR /opencv_build/build
RUN cmake -D OPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules \
    -D CMAKE_C_COMPILER=/usr/bin/gcc-11 \
    -D CMAKE_CXX_COMPILER=/usr/bin/g++-11 \
    -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D PYTHON3_EXECUTABLE=/usr/bin/python3 \
    -D PYTHON3_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
    -D PYTHON3_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
    -D WITH_CUDA=ON \
    -D WITH_CUDNN=OFF \
    -D OPENCV_DNN_CUDA=OFF \
    -D CUDA_ARCH_BIN=8.9 \
    -D CUDA_ARCH_PTX="" \
    -D WITH_CUBLAS=ON \
    -D ENABLE_FAST_MATH=ON \
    -D CUDA_FAST_MATH=ON \
    -D WITH_GSTREAMER=ON \
    -D WITH_GSTREAMER_0_10=OFF \
    -D WITH_LIBV4L=ON \
    -D WITH_V4L=ON \
    -D WITH_FFMPEG=OFF \
    -D OPENCV_FFMPEG_USE_FIND_PACKAGE=ON \
    -D OPENCV_FFMPEG_LINK_DYNAMICALLY=ON \
    -D WITH_TBB=ON \
    -D WITH_NVCUVID=ON \
    -D WITH_NVCUVENC=ON \
    -D BUILD_opencv_python2=OFF \
    -D BUILD_opencv_python3=ON \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D INSTALL_C_EXAMPLES=OFF \
    -D OPENCV_ENABLE_NONFREE=ON \
    -D BUILD_EXAMPLES=OFF \
    -D BUILD_SHARED_LIBS=ON \
    -D OPENCV_GENERATE_PKGCONFIG=ON \
    -D BUILD_opencv_highgui=OFF \
    -D BUILD_opencv_apps=OFF \
    -D BUILD_TESTS=OFF \
    -D BUILD_PERF_TESTS=OFF \
    -D BUILD_DOCS=OFF \
    -D WITH_GTK=OFF \
    -D WITH_QT=OFF \
    -D WITH_X11=OFF \
    -D WITH_OPENGL=OFF \
    -D BUILD_opencv_cudaarithm=OFF \
    -D BUILD_opencv_cudabgsegm=OFF \
    -D BUILD_opencv_cudacodec=OFF \
    -D BUILD_opencv_cudafeatures2d=OFF \
    -D BUILD_opencv_cudafilters=OFF \
    -D BUILD_opencv_cudaimgproc=OFF \
    -D BUILD_opencv_cudalegacy=OFF \
    -D BUILD_opencv_cudaobjdetect=OFF \
    -D BUILD_opencv_cudaoptflow=OFF \
    -D BUILD_opencv_cudastereo=OFF \
    -D BUILD_opencv_cudawarping=OFF \
    -D BUILD_opencv_photo=OFF \
    ../opencv

# Собираем и устанавливаем OpenCV
RUN make -j$(nproc) && \
    make install && \
    ldconfig

# Очищаем неиспользуемые файлы
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /opencv_build

# Устанавливаем рабочую директорию
WORKDIR /app

# Проверяем установку OpenCV
RUN python3 -c "import cv2; print('OpenCV версия:', cv2.__version__); import sys; print('Python версия:', sys.version)" && \
    python3 -c "import cv2; print('Поддержка GPU:', cv2.cuda.getCudaEnabledDeviceCount() > 0)" || echo "Warning: Не удалось проверить поддержку GPU"

# Команда по умолчанию
CMD ["/bin/bash"]